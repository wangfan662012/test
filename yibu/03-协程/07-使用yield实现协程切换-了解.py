"""
协程是啥?
03-协程：是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。
协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存
器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。

协程是python中另外一种实现多任务的方式，只不过比线程更小占用更小执行单元（理解为需要的资源）。
为啥说它是一个执行单元，因为它自带CPU上下文（CPU上下文：https://www.cnblogs.com/wangchaowei/p/8472565.html）
这样只要在合适的时机， 我们可以把一个协程 切换到另一个协程。
只要这个过程中保存或恢复 CPU上下文那么程序还是可以运行的。

通俗的理解：在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，
注意不是通过调用函数的方式做到的，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定
"""
# 协程和线程差异
# 在实现多任务时, 线程切换从系统层面远不止保存和恢复 CPU上下文这么简单。
# 操作系统为了程序运行的高效性每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作。
# 所以线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，所以一秒钟切换个上百万次系统都抗的住。
import time


def work1():
    while True:
        print("----work1---")
        yield   # 就是保存当前程序执行状态
        time.sleep(0.5)


def work2():
    while True:
        print("----work2---")
        yield
        time.sleep(0.5)


# 理解协程思想 使用单线程执行多任务
if __name__ == '__main__':
    # 生成器对象
    w1 = work1()
    w2 = work2()
    while True:
        next(w1)
        next(w2)

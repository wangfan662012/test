广度用队列，深度用递归。
所消耗的时间从小到大
O(1) < O(logn) < O(n) < O(nlogn) < O(n2) < O(n3) < O(2n) < O(n!) < O(nn)
scp：
scp -r hello.py python@172.16.0.151:/home/python/Desktop/
scp -r python@172.16.0.151:/home/python/Desktop/hello.py

MySQL:
mysql -uroot -p school > school.sql
mysql -uroot -p school < school.sql

进程、线程、协程都是可以完成多任务编程。
1.	进程之间不共享全局变量
2.	线程之间共享全局变量，但是要注意资源竞争的问题，解决办法: 互斥锁或者线程同步
3.	创建进程的资源开销要比创建线程的资源开销要大
4.	进程是操作系统资源分配的基本单位，线程是CPU调度的基本单位
5.	线程不能够独立执行，必须依存在进程中
6.	多进程开发比单进程多线程开发稳定性要强
7.	协程切换任务资源很小，效率高
————————————————————————————————————
######################################################################################
迭代：迭代是访问集合元素的一种方式，使用for循环遍历取值的过程叫做迭代，比如：使用for循环遍历列表获取值的过程
迭代器：迭代器是一个可以记住遍历的位置的对象。
迭代器对象：迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。
可迭代对象：使用for循环遍历取值的对象叫做可迭代对象, 比如：列表、元组、字典、集合、range、字符串
生成器：yield  代码执行到yield会暂停，然后把结果返回出去，下次启动生成器会在暂停的位置继续往下执行
# return 和 yield的区别
# yield: 每次启动生成器都会返回一个值，多次启动可以返回多个值，也就是yield可以返回多个值
# return: 只能返回一次值，代码执行到return语句就停止迭代
#########################################################################